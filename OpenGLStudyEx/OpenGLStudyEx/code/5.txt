/*
05 -《一致变量Uniform Variables》
https://blog.csdn.net/cordova/article/details/52504118
*/

#include "stdafx.h"
#include <stdio.h>
#include <string>
#include <glew.h>        // GLEW扩展库
#include <freeglut.h>  // freeGLUT图形库
#include "ogldev_math_3d.h" // 用于OpenGL的3d数学库,这里主要用到了顶点这个数据结构，下载原作者的源码可以找到这个头文件，
#include "ogldev_util.h" //这里要添加作者的工具类用于读取文本文件

#pragma comment(lib,"glew32.lib")  //不可缺少

using namespace std;

GLuint VBO;
GLuint gScaleLocation; //位置中间变量

//定义vs  和 fs 的路径名
const char* pVsFileName = "./shader/05_shader.vs";
const char* pFsFileName = "./shader/05_shader.fs";

/**
 渲染回调函数
*/
static void RenderScenceCB() {
	// 清空颜色缓存
	glClear(GL_COLOR_BUFFER_BIT);

	//diff:
	//维护一个慢慢不断增大的静态浮点数
	static float Scale = 0.0f;
	Scale += 0.01f/10;
	//将值传递给shader
	glUniform1f(gScaleLocation,sinf(Scale));

	// 开启顶点属性
	glEnableVertexAttribArray(0);
	// 绑定GL_ARRAY_BUFFER缓冲器
	glBindBuffer(GL_ARRAY_BUFFER, VBO);
	// 告诉管线怎样解析bufer中的数据
	glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 0, 0);

	// 开始绘制几何图形(绘制绘制一个三角形，三个顶点)
	glDrawArrays(GL_TRIANGLES, 0, 3);  //diff:绘制指令有区别

	//  禁用顶点数据
	glDisableVertexAttribArray(0);

	// 交换前后缓存
	glutSwapBuffers();
}

static void InitializeGlutCallbacks()
{
	glutDisplayFunc(RenderScenceCB);
	//diff:将渲染回调注册为全局闲置回调
	glutIdleFunc(RenderScenceCB);
}

/**
* 创建顶点缓冲器
*/
static void CreateVertexBuffer()
{
	// 创建含有3个顶点的顶点数组
	Vector3f Vertices[3];      //diff:数组长度有区别
	// 将点置于屏幕中央
	Vertices[0] = Vector3f(-1.0f, -1.0f, 0.0f);
	Vertices[1] = Vector3f( 1.0f, -1.0f, 0.0f);
	Vertices[2] = Vector3f( 0.0f,  1.0f, 0.0f);

	// 创建缓冲器
	glGenBuffers(1, &VBO);
	// 绑定GL_ARRAY_BUFFER缓冲器
	glBindBuffer(GL_ARRAY_BUFFER, VBO);
	// 绑定顶点数据
	glBufferData(GL_ARRAY_BUFFER, sizeof(Vertices), Vertices, GL_STATIC_DRAW);
}

/**
*使用shader文本编译shader对象，并绑定shader到着色器程序中
*/
static void AddShader(GLuint ShaderProgram, const char* pShaderText, GLenum ShaderType)
{	
	//根据shader类型参数，定义对应的shader对象
	GLuint ShaderObj = glCreateShader(ShaderType);
	//检查是否定义成功
	if (ShaderObj == 0)
	{
		fprintf(stderr,"Error creating shader type %d\n",ShaderType);
		exit(1);
	}

	//定义shader代码源
	const GLchar* p[1];
	p[0] = pShaderText;
	GLint Lengths[1];
	Lengths[0] = strlen(pShaderText);
	glShaderSource(ShaderObj,1,p,Lengths);
	glCompileShader(ShaderObj);//编译shader对象

	//检查和shader相关的错误
	GLint success;
	glGetShaderiv(ShaderObj,GL_COMPILE_STATUS,&success);
	if (!success)
	{
		GLchar InfoLog[1024];
		glGetShaderInfoLog(ShaderObj,1024,NULL,InfoLog);
		fprintf(stderr,"Error compiling shader type %d: '%s'\n",ShaderType,InfoLog);
		exit(1);
	}

	//将编译好的shader对象绑定到program object程序对象上
	glAttachShader(ShaderProgram,ShaderObj);

}


/**
*编译着色器
*/
static void CompileShaders()
{
	//创建着色器程序
	GLuint ShaderProgram = glCreateProgram();
	//检查是否创建成功
	if (ShaderProgram == 0)
	{
		fprintf(stderr,"Error creating shader program\n");
		exit(1);
	}
	
	//存储着色器文本的字符串缓冲
	string vs, fs;
	if (!ReadFile(pVsFileName, vs))
	{
		exit(1);
	}
	if (!ReadFile(pFsFileName, fs))
	{
		exit(1);
	}

	//添加顶点vs 、fs
	AddShader(ShaderProgram,vs.c_str(),GL_VERTEX_SHADER);
	AddShader(ShaderProgram,fs.c_str(),GL_FRAGMENT_SHADER);

	//链接shader着色器程序，并检查程序相关错误
	GLint Success = 0;
	GLchar ErrorLog[1024] = {0};
	glLinkProgram(ShaderProgram);
	glGetProgramiv(ShaderProgram,GL_LINK_STATUS,&Success);
	if (Success == 0)
	{
		glGetProgramInfoLog(ShaderProgram,sizeof(ErrorLog),NULL,ErrorLog);
		fprintf(stderr,"Error linking shader program:'%s'\n",ErrorLog);
		exit(1);
	}

	//检查沿着在当前的管线状态程序是否可以被执行
	glValidateProgram(ShaderProgram);
	glGetProgramiv(ShaderProgram,GL_VALIDATE_STATUS,&Success);
	if (!Success)
	{
		glGetProgramInfoLog(ShaderProgram, sizeof(ErrorLog), NULL, ErrorLog);
		fprintf(stderr, "Error linking shader program:'%s'\n", ErrorLog);
		exit(1);
	}

	//设置到管线声明中来使用上面成功建立的shader程序
	glUseProgram(ShaderProgram);

	// 查询获取一致变量的位置
	gScaleLocation = glGetUniformLocation(ShaderProgram, "gScale");
	// 检查错误
	assert(gScaleLocation != 0xFFFFFFFF);
}



/**
* 主函数
*/
int main(int argc, char ** argv) {

	// 初始化GLUT
	glutInit(&argc, argv);

	// 显示模式：双缓冲、RGBA
	glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGBA);

	// 窗口设置
	glutInitWindowSize(1024, 768);      // 窗口尺寸
	glutInitWindowPosition(100, 100);  // 窗口位置
	glutCreateWindow("Tutorial 04");   // 窗口标题

	// 开始渲染
	//glutDisplayFunc(RenderScenceCB);

	InitializeGlutCallbacks();

	// 检查GLEW是否就绪，必须要在GLUT初始化之后！
	GLenum res = glewInit();
	if (res != GLEW_OK) {
		fprintf(stderr, "Error: '%s'\n", glewGetErrorString(res));
		return 1;
	}

	// 缓存清空后的颜色值
	glClearColor(0.0f, 0.0f, 0.0f, 0.0f);

	// 创建顶点缓冲器
	CreateVertexBuffer();

	//编译着色器
	CompileShaders();

	// 通知开始GLUT的内部循环
	glutMainLoop();

	return 0;
}